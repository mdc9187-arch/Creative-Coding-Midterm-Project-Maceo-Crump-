// • Graphics (shape, color, line, placement, custom shapes)
// • Control Structures (if, for, while)
// • Movement
// • Interaction (mouse, keyboard)
// • Custom functions with passing parameters
// • Arrays
// • Math
// • Random
// • Functions

// Must haves:

// • heavy use of variables
// • custom functions passing variables as parameter
// • loops
// • control structures
// • math or random
// • some use of interaction or change over time
// • movement, change, variety
// • arrays
// • conditionals
// • OOP - with methods + passing parameters


//NOTES ::: Sketch should have extreme randomness and speed, jarring activity, but with a press of space or a mouse click, should revert from chaos to absolute order, a still frame of something beautiful. It could also require a held input to freeze looops. Also complete gradient background with flashing randomization


// 
const numLoops = 1000;
let LoopsX = [];
let LoopsY = [];
let LoopsSize = [];
let LoopsSpeed = [];
let LoopsAreMoving = true;


function setup() {
  createCanvas(500, 500);
  


  // Loopss
  for (let i = 0; i < numLoops; i++) {
    LoopsX[i] = random(width);
    LoopsY[i] = random(height);
    LoopsSize[i] = random(1, 1000);
    LoopsSpeed[i] = random(0.5, 200);
  }
}

function draw() {
  drawVoid();

 

  // Loops
  handleLoops();


  
}

function drawVoid() {
  let topColor = color(0);
  let bottomColor = color(0);
  for (let i = 0; i < height; i++) {
    // calculate color with y
    let inter = map(i, 0, height, 0, 1);
    let c = lerpColor(topColor, bottomColor, inter);
    stroke(c);
    // horizontal line
    line(0, i, width, i);
  }
}



function handleLoops() {
  for (let i = 0; i < numLoops; i++) {
    // Loops only moves if boolean is true
    if (LoopsAreMoving) {
      LoopsY[i] -= LoopsSpeed[i];
    }

    // reset Loop when reaches the top
    if (LoopsY[i] < -LoopsSize[i]) {
      LoopsY[i] = height + LoopsSize[i];
      LoopsX[i] = random(width);
    }

    stroke(255, 170);
    strokeWeight(1);
    noFill();
    ellipse(2*LoopsX[i], LoopsY[i], LoopsSize[i], LoopsSize[i]);
  }
}

function mousePressed() {
  // switches boolean true/false
  LoopsAreMoving = !LoopsAreMoving;


function keyPressed() {
  // switch boolean true/false
  LoopsAreMoving = !LoopsAreMoving;
normalize(Loops)
}

}
